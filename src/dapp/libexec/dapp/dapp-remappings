#!/usr/bin/env node
const PROGRAM_NAME = process.argv[1].replace(/.*\//, "")

console.log(buildRemappings(deduplicate(buildDependencyTree("."))).join("\n"))

// builds a in memory representation of the projects dependency tree
//
// A node in the tree looks like this:
//
//   {
//     name: "",
//     path: "",
//     hash: "",
//     deps: []
//   }
function buildDependencyTree(prefix) {
  const lib = `${prefix}/${process.env.DAPP_LIB}`
  return {
    name: prefix.split("/").pop(),
    path: normalize(`${prefix}/${process.env.DAPP_SRC}`),
    hash: hash(prefix),
    deps: ls(lib).map(p => buildDependencyTree(`${lib}/${p}`))
  }
}

// walk tree and build remappings
function buildRemappings(pkg) {
  const remappings = pkg.deps.map(dep => {
    return `${pkg.path}/:${dep.name}/=${dep.path}/`
  })
  return pkg.deps.map(buildRemappings).concat(remappings).flat()
}

// walk tree and rewrite paths so that all packages with the same hash have the same path
function deduplicate(pkg) {
  const mapping = mapHashes(pkg)
  const go = p => ({ ...p, path: mapping[p.hash], deps: p.deps.map(go) })
  return go(pkg)
}

// walk tree and build a mapping from hash => path
function mapHashes(pkg) {
  const go = (mapping, dep) => {
    mapping[dep.hash] = dep.path
    return dep.deps.reduce(go, mapping)
  }
  return pkg.deps.reduce(go, { [pkg.hash]: pkg.path })
}

// strip the leading `.` or `./` from a path
function normalize(path) {
  return path.replace(/^\.\//, "").replace(/^\//, "")
}

// computes the hash of the contents of a given directory, uses the git hash if
// availalbe (because it's faster), or falls back to a sha256sum of the directory contents if needed
function hash(dir) {
  if (ls(dir).includes(".git")) {
    return run("git", ["-C", dir, "rev-parse", "HEAD"])
  } else {
    return run("bash", ["-c", `rg --files ${dir} | sort | xargs sha256sum | sha256sum`])
  }
}

function ls(dir) {
  try {
    return require("fs").readdirSync(dir).sort()
  } catch (error) {
    return []
  }
}

function run(cmd, args) {
  return require("child_process").execFileSync(cmd, args, {
    encoding: "utf-8"
  })
}
